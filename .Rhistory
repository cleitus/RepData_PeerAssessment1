library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf = read.csv( path2csv, stringsAsFactors = FALSE)
?read.csv
path2csv
mydf <- read.csv( path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl-df(mydf)
sf
cran <- tbl-df(mydf).
cran <- tbl-df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "FR")
filter(cran, country == "LB")
filter(cran, country == "LE")
filter(cran, country == "NG")
filter(cran, country == "VC")
filter(cran, country == "VT")
filter(cran, country == "AR")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran = tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize( by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
max(pack_sum$count)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate()
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
student3
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
library(plyr)
?mutate
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
students4
submit
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
?select
?contains
select(sat, contains("total"))
select(sat, !contains("total"))
select(sat, -contains("total"))
gather(select(sat, -contains("total")), part_sex, count, -score_range)
?separate
submit()
submit()
submit()
getwd()
getwd()
setwd("C:/Users/Toshiba/reproducible_research/RepData_PeerAssessment1")
setwd("C:/Users/Toshiba/Desktop/reproducible_research/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
head(data)
str(data)
mean(data$steps, na.rm=TRUE)
sum(data$steps, na.rm=TRUE)
sum(data$steps[unique(data$date)], na.rm=TRUE)
unique(data$date)
data$steps[unique(data$date)]
data$steps[unique(data$date, na.rm=TRUE)]
data[unique(data$date, na.rm=TRUE)]
data[unique(data$date)]
unique(data$date)
head(data)
?aggregate
steps_mean_per_interval <- aggregate(steps ~ interval, data = data, FUN = mean)
head(data)
head(steps_mean_per_interval)
data <- merge(data, steps_mean_per_interval, by = "interval", suffixes = c("", "_prime"))
head(data)
data<-read.csv("activity.csv")
imputed_data <- merge(data, steps_mean_per_interval, by = "interval", suffixes = c("", "_prime"))
head(imputed_data)
imputed_data$steps[nas] <- imputed_data$steps_prime[nas]
nas <- is.na(imputed_data$steps)
imputed_data$steps[nas] <- imputed_data$steps_prime[nas]
head(imputed_data)
imputed_data <- imputed_data[, c(1:3)]
steps_per_day_prime <- aggregate(steps ~ date, imputed_data, sum)
steps_per_day_prime <- rbind(steps_per_day_prime, cbind(steps_per_day$steps))
steps_per_day <- aggregate(steps ~ date, data, sum)
steps_per_day_prime <- aggregate(steps ~ date, imputed_data, sum)
steps_per_day_prime <- rbind(steps_per_day_prime, cbind(steps_per_day$steps))
steps_per_day_prime <- aggregate(steps ~ date, imputed_data, sum)
head(steps_per_day_prime)
head(steps_per_day)
head(steps_per_day, 10)
head(steps_per_day, 100)
head(steps_per_day, 10)
head(steps_per_day_prime, 10)
steps_per_day_prime <- cbind(steps_per_day_prime, missing_data = "Filled"))
steps_per_day_prime <- cbind(steps_per_day_prime, missing_data = "Filled")
head(steps_per_day_prime, 10)
steps_per_day       <- cbind(steps_per_day      , missing_data = "Not filled")
head(steps_per_day, 10)
steps_compar        <- rbind(steps_per_day_prime, steps_per_day)
p                   <- ggplot(steps_compar, aes(x=steps, fill=missing_data))
library(ggplot2)
p                   <- ggplot(steps_compar, aes(x=steps, fill=missing_data))
p + geom_bar()
head(steps_compar)
head(imputed_data)
head(data)
str(imputed_data)
str(data)
p                   <- ggplot(steps_per_day, aes(x=steps))
p + geom_bar()
p                   <- ggplot(steps_per_day_prime, aes(x=steps))
p + geom_bar()
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays), "Weekday", "Weekend"))
head(imputed_data)
smpip <- aggregate(steps ~ interval + dotw, imputed_data, mean)
smpip <- aggregate(steps ~ interval + dot, imputed_data, mean)
smpip <- aggregate(steps ~ interval + do, imputed_data, mean)
smpip <- aggregate(steps ~ interval + dow, imputed_data, mean)
smpip[smpip$dotw="Weekday"]
smpip[smpip$dow="Weekday"]
head(smpip)
head(smpip[smpip$dow == "weekday"])
smpip[smpip$dow == "weekday"]
smpip[dow == "weekday"]
smpip[dow]
smpip[[dow]]
smpip[2]
smpip$dow
smpip[smpip[2] == "weekday"]
smpip[2] == "weekday"
smpip[2] == "Weekday"
smpip[smpip[2] == "Weekday"]
smpip[smpip$dow=="Weekday"]
head[smpip]
head(smpip)
smpip[smpip$dow="Weekday"]
smpip[smpip$dow!="Weekday"]
smpip[smpip$dow!="Weekday",]
head(data)
max(data$interval)
max(data$interval,472)
head(data$interval,472)
head(data,472)
head(data,700)
max(data$interval,472)
